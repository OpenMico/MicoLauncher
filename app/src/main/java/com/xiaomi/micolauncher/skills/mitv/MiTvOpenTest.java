package com.xiaomi.micolauncher.skills.mitv;

import android.annotation.SuppressLint;
import android.content.Context;
import android.os.Handler;
import android.os.HandlerThread;
import android.os.Looper;
import android.os.Message;
import android.text.TextUtils;
import com.alibaba.fastjson.JSONObject;
import com.xiaomi.mesh.provision.MiotMeshDeviceItem;
import com.xiaomi.mico.base.utils.ToastUtil;
import com.xiaomi.mico.utils.ThreadUtil;
import com.xiaomi.micolauncher.R;
import com.xiaomi.micolauncher.common.L;
import com.xiaomi.micolauncher.skills.mitv.MiTVDevices;
import com.xiaomi.passport.StatConstants;
import java.io.IOException;
import java.util.List;
import java.util.concurrent.TimeUnit;

/* loaded from: classes3.dex */
public class MiTvOpenTest {
    @SuppressLint({"StaticFieldLeak"})
    private static volatile MiTvOpenTest a;
    private static final long g = TimeUnit.SECONDS.toMillis(5);
    private static final long h = TimeUnit.SECONDS.toMillis(10);
    private static final long i = TimeUnit.SECONDS.toMillis(120);
    private static final long j = TimeUnit.SECONDS.toMillis(20);
    private Context c;
    private Handler e;
    private String f;
    private MiTVDevices b = new MiTVDevices();
    private int d = -1;
    private int k = 0;
    private int l = 0;

    static /* synthetic */ int c(MiTvOpenTest miTvOpenTest) {
        int i2 = miTvOpenTest.k;
        miTvOpenTest.k = i2 + 1;
        return i2;
    }

    static /* synthetic */ int d(MiTvOpenTest miTvOpenTest) {
        int i2 = miTvOpenTest.l;
        miTvOpenTest.l = i2 + 1;
        return i2;
    }

    public static MiTvOpenTest getInstance() {
        if (a == null) {
            synchronized (MiTvManager.class) {
                if (a == null) {
                    a = new MiTvOpenTest();
                }
            }
        }
        return a;
    }

    public void start(Context context) {
        this.c = context;
        this.d = -1;
        L.dlna.i("%s start!", "[MiTvOpenTest]: ");
        h();
        HandlerThread handlerThread = new HandlerThread("MiTvManager");
        handlerThread.start();
        this.e = new a(handlerThread.getLooper());
        L.dlna.i("%s 开始电视测试!", "[MiTvOpenTest]: ");
        L.dlna.i("%s ping 电视是否在线!", "[MiTvOpenTest]: ");
        this.f = f();
        if (!TextUtils.isEmpty(this.f)) {
            a(this.f, 0);
        } else {
            L.dlna.i("%s host is null", "[MiTvOpenTest]: ");
        }
    }

    /* loaded from: classes3.dex */
    private final class a extends Handler {
        a(Looper looper) {
            super(looper);
        }

        @Override // android.os.Handler
        public void handleMessage(Message message) {
            if (message.what == -1) {
                String str = (String) message.obj;
                int e = MiTvOpenTest.this.e();
                L.dlna.i("%s currentState: %s", "[MiTvOpenTest]: ", MiTvOpenTest.this.a(e));
                if (TextUtils.isEmpty(str)) {
                    L.dlna.i("%s pingResult is null", "[MiTvOpenTest]: ");
                } else if (str.equals(MiotMeshDeviceItem.CONNECT_STATE_FAILED)) {
                    if (e == -1 || e == 4) {
                        MiTvOpenTest.this.b(4);
                        ToastUtil.showToast((int) R.string.opening_mitv, 10);
                        MiTvManager.getInstance().wakeUpMiTv(null);
                        MiTvOpenTest.this.b(1);
                        MiTvOpenTest miTvOpenTest = MiTvOpenTest.this;
                        miTvOpenTest.a(miTvOpenTest.f, (int) MiTvOpenTest.g);
                    } else if (e == 1) {
                        if (MiTvOpenTest.c(MiTvOpenTest.this) >= 30) {
                            ToastUtil.showToast((int) R.string.err_opening_ping_failed, 10);
                        } else {
                            MiTvOpenTest miTvOpenTest2 = MiTvOpenTest.this;
                            miTvOpenTest2.a(miTvOpenTest2.f, (int) MiTvOpenTest.h);
                        }
                    } else if (e == 2) {
                        L.dlna.e("%s currentState: %s, but ping is failed, Please Checked!!!", "[MiTvOpenTest]: ", MiTvOpenTest.this.a(e));
                        ToastUtil.showToast((int) R.string.err_opened_ping_failed, 10);
                        MiTvOpenTest miTvOpenTest3 = MiTvOpenTest.this;
                        miTvOpenTest3.a(miTvOpenTest3.f, (int) MiTvOpenTest.g);
                    } else if (e == 3) {
                        MiTvOpenTest.this.b(4);
                        MiTvOpenTest miTvOpenTest4 = MiTvOpenTest.this;
                        miTvOpenTest4.a(miTvOpenTest4.f, (int) MiTvOpenTest.j);
                    } else {
                        L.dlna.e("%s not handle this type: %s", "[MiTvOpenTest]: ", MiTvOpenTest.this.a(e));
                    }
                } else if (str.equals(StatConstants.BIND_SUCCESS)) {
                    if (e == -1 || e == 1 || e == 2 || e == 3) {
                        MiTvOpenTest.this.k = 0;
                        MiTvOpenTest.this.b(3);
                        ToastUtil.showToast((int) R.string.closing_mitv, 10);
                        if (MiTvOpenTest.d(MiTvOpenTest.this) <= 30) {
                            MiTvManager.getInstance().queryMiTv("关机", "query");
                            MiTvOpenTest miTvOpenTest5 = MiTvOpenTest.this;
                            miTvOpenTest5.a(miTvOpenTest5.f, (int) MiTvOpenTest.g);
                        }
                        MiTvOpenTest miTvOpenTest6 = MiTvOpenTest.this;
                        miTvOpenTest6.a(miTvOpenTest6.f, (int) MiTvOpenTest.i);
                    } else if (e == 3) {
                        MiTvOpenTest miTvOpenTest7 = MiTvOpenTest.this;
                        miTvOpenTest7.a(miTvOpenTest7.f, (int) MiTvOpenTest.g);
                    } else if (e == 4) {
                        MiTvOpenTest.this.b(1);
                        MiTvOpenTest miTvOpenTest8 = MiTvOpenTest.this;
                        miTvOpenTest8.a(miTvOpenTest8.f, (int) MiTvOpenTest.g);
                    }
                }
            }
            super.handleMessage(message);
        }
    }

    /* JADX INFO: Access modifiers changed from: private */
    public String a(int i2) {
        if (i2 == -1) {
            return "MITV_STATE_IDLE";
        }
        switch (i2) {
            case 1:
                return "MITV_STATE_OPENINIG";
            case 2:
                return "MITV_STATE_OPENED";
            case 3:
                return "MITV_STATE_CLOSING";
            case 4:
                return "MITV_STATE_CLOSED";
            default:
                L.dlna.e("%s not handle this state: %s", "[MiTvOpenTest]: ", Integer.valueOf(i2));
                return null;
        }
    }

    /* JADX INFO: Access modifiers changed from: private */
    public int e() {
        return this.d;
    }

    /* JADX INFO: Access modifiers changed from: private */
    public void b(int i2) {
        L.dlna.i("%s ====> Set state: %s", "[MiTvOpenTest]: ", a(i2));
        this.d = i2;
    }

    private String f() {
        int g2 = g();
        if (g2 < 0) {
            return null;
        }
        String host = this.b.getDevice_list().get(g2).getHost();
        if (!TextUtils.isEmpty(host)) {
            return host;
        }
        return null;
    }

    private int g() {
        List<MiTVDevices.DeviceListBean> device_list = this.b.getDevice_list();
        if (device_list == null) {
            return -1;
        }
        for (int i2 = 0; i2 < device_list.size(); i2++) {
            if (device_list.get(i2).getSelected() == 1) {
                L.dlna.i("%s discovery selected device num: %s", "[MiTvOpenTest]: ", Integer.valueOf(i2));
                return i2;
            }
        }
        return -1;
    }

    /* JADX INFO: Access modifiers changed from: private */
    public void a(final String str, final int i2) {
        ThreadUtil.getIoThreadPool().submit(new Runnable() { // from class: com.xiaomi.micolauncher.skills.mitv.-$$Lambda$MiTvOpenTest$vNqFpVr2UHoctxf-75ZDKVxqcY8
            @Override // java.lang.Runnable
            public final void run() {
                MiTvOpenTest.this.b(str, i2);
            }
        });
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void b(String str, int i2) {
        int i3;
        Runtime runtime = Runtime.getRuntime();
        String str2 = "ping -c 1 -w 5 " + str;
        L.dlna.i("%s command: %s", "[MiTvOpenTest]: ", str);
        try {
            try {
                i3 = runtime.exec(str2).waitFor();
            } catch (InterruptedException e) {
                L.dlna.e("%s ipProcess.waitFor failed: ", "[MiTvOpenTest]: ", e);
                i3 = -1;
            }
        } catch (IOException e2) {
            L.dlna.e("%s runtime.exec failed: ", "[MiTvOpenTest]: ", e2);
            i3 = -1;
        }
        if (i3 == 0) {
            L.dlna.i("%s ping 小米电视成功!", "[MiTvOpenTest]: ");
            a(StatConstants.BIND_SUCCESS, -1, i2);
        } else if (i3 == 1) {
            L.dlna.i("%s ping 小米电视失败!", "[MiTvOpenTest]: ");
            a(MiotMeshDeviceItem.CONNECT_STATE_FAILED, -1, i2);
        } else if (i3 == -1) {
            L.dlna.e("%s not ipProcess.waitFor() !", "[MiTvOpenTest]: ");
        }
    }

    private void a(Object obj, int i2, int i3) {
        L.dlna.i("%s send MiTv Message: %s, delay: %s s", "[MiTvOpenTest]: ", Integer.valueOf(i2), Integer.valueOf(i3 / 1000));
        Message obtain = Message.obtain();
        obtain.obj = obj;
        obtain.what = i2;
        if (i3 == 0) {
            this.e.sendMessage(obtain);
        } else {
            this.e.sendMessageDelayed(obtain, i3);
        }
    }

    private void h() {
        String string = this.c.getSharedPreferences("mitv_devices", 0).getString("dev", null);
        if (!TextUtils.isEmpty(string)) {
            L.dlna.d("%s 找到本地MiTv设备信息", "[MiTvOpenTest]: ");
            L.dlna.i("%s dev: %s", "[MiTvOpenTest]: ", string);
            this.b = (MiTVDevices) JSONObject.parseObject(string, MiTVDevices.class);
            return;
        }
        L.dlna.d("%s 未找到本地MiTv设备信息", "[MiTvOpenTest]: ");
    }
}
